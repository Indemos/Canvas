@page "/map"

@using Canvas.Core
@using Canvas.Core.Composers
@using Canvas.Core.Engines
@using Canvas.Core.Enums;
@using Canvas.Core.Models
@using Canvas.Core.Shapes
@using Canvas.Core.Services
@using ScriptContainer
@using SkiaSharp;

<div class="demo">
  <CanvasView @ref="ViewControl"></CanvasView>
</div>

<style type="text/css">
  .demo {
    display: flex;
    flex-grow: 1;
    height: 100%;
  }
</style>

@code
{
  public CanvasView ViewControl { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      var min = 0;
      var max = 5;
      var generator = new Random();
      var colorService = new ColorService { Min = min, Max = max, Mode = ShadeEnum.Intensity };
      var points = Enumerable.Range(0, 10).Select(i => new ColorMapShape
      {
        Points = Enumerable
          .Range(min, max)
          .Select(o => new ComponentModel { Size = o, Color = colorService.GetColor(o) })
          .OrderBy(o => generator.Next())
          .ToList()

      } as IShape).ToList();

      var indexLabels= new[] { "CAD", "DKK", "NZD", "SGD", "UAH", "NOK", "JPY", "CNY", "INR", "SEK" };
      var valueLabels = new[] { "USD", "EUR", "CHF", "AUD", "GBP" };
      var composer = new Composer
      {
        Name = "Correlation",
        Items = points,
        ValueCount = max,
        ShowIndex = null,
        ShowValue = null,
        ShowCellIndex = (i, o) => indexLabels.ElementAtOrDefault((int)i),
        ShowCellValue = (i, o) => valueLabels.ElementAtOrDefault((int)i)
      };

      await ViewControl.Create<CanvasEngine>(() => composer);
      await composer.Update();
    }

    await base.OnAfterRenderAsync(setup);
  }
}
